1.编译原理

	(1).分词/词法分析: 将字符串分解成词法单元； 例如 var a = 2; 程序分解为: var, a, =, 2, ;

	(2).解析/语法分析: 将词法单元转换抽象语法树 -AST

	(3).代码生成: 将AST转换为可执行的代码。

	js代码片段在执行之前都要进行编译（通常就在执行前）。

2.理解作用域

	引擎：从头到尾负责js程序的编译和执行；

	编译器：负责语法分析及代码生成等

	作用域：负责收集并维护又所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行代码对这些标识符的访问权限；

3.引擎查找方式：

	1.LHS查询：变量出现在赋值操作的左侧（赋值操作的目标是谁）例如 a = 2

	2.RHS查询：变量出现在赋值操作的右侧（谁是赋值操作的源头）

	function foo(a) {
		console.log(a)
	}	
	foo(2);

		1.foo 进行 RHS查询 
		2.a = 2 进行LHS查询
		3.a 进行RHS查询
		4.console对象进行RHS查询


